***************
*** 40,50 ****
  
  		addPacketOpcode(SM_CUSTOM_PACKET.class, 99999, idSet); // fake packet
  		
- 		addPacketOpcode(SM_UNKF5.class, Version.Chiness ? 0xF5 : 0x07, idSet);
  		addPacketOpcode(SM_UNKEF.class, Version.Chiness ? 0xef : -1, idSet);
  		addPacketOpcode(SM_UNKE7.class, Version.Chiness ? 0xe7 : -1, idSet);
  		addPacketOpcode(SM_UNKE1.class, Version.Chiness ? 0xe1 : -1, idSet);
- 		addPacketOpcode(SM_UNKD9.class, Version.Chiness ? 0xD9 : 0xE3, idSet);
  		addPacketOpcode(SM_UNKD3.class, Version.Chiness ? 0xd3 : -1, idSet);
  		addPacketOpcode(SM_UNKCB.class, Version.Chiness ? 0xcb : -1, idSet);
  		addPacketOpcode(SM_UNKC8.class, Version.Chiness ? 0xc8 : -1, idSet);
--- 40,50 ----
  
  		addPacketOpcode(SM_CUSTOM_PACKET.class, 99999, idSet); // fake packet
  		
+ 		addPacketOpcode(SM_UNKF5.class, Version.Chiness ? 0xF5 : 0x26, idSet);
  		addPacketOpcode(SM_UNKEF.class, Version.Chiness ? 0xef : -1, idSet);
  		addPacketOpcode(SM_UNKE7.class, Version.Chiness ? 0xe7 : -1, idSet);
  		addPacketOpcode(SM_UNKE1.class, Version.Chiness ? 0xe1 : -1, idSet);
+ 		addPacketOpcode(SM_UNKD9.class, Version.Chiness ? 0xD9 : -1, idSet); // was 0xE3
  		addPacketOpcode(SM_UNKD3.class, Version.Chiness ? 0xd3 : -1, idSet);
  		addPacketOpcode(SM_UNKCB.class, Version.Chiness ? 0xcb : -1, idSet);
  		addPacketOpcode(SM_UNKC8.class, Version.Chiness ? 0xc8 : -1, idSet);
***************
*** 60,108 ****
  		addPacketOpcode(SM_UNK5E.class, Version.Chiness ? 0x5e : -1, idSet);
  		addPacketOpcode(SM_UNK32.class, Version.Chiness ? 0x32 : -1, idSet);
  		addPacketOpcode(SM_UNK17.class, Version.Chiness ? 0x17 : -1, idSet);
- 		addPacketOpcode(SM_UNK0C.class, Version.Chiness ? 0x0C : 0xFC, idSet);
  		addPacketOpcode(SM_UNK0A.class, Version.Chiness ? 0x0A : -1, idSet);
- 		addPacketOpcode(SM_VERSION_CHECK.class, Version.Chiness ? 0xF6 : 0xFE, idSet);
- 		addPacketOpcode(SM_SYSTEM_MESSAGE.class, Version.Chiness ? 0x2A : 0x1A, idSet);
  		addPacketOpcode(SM_STATUPDATE_MP.class, Version.Chiness ? -1 : 0x14, idSet);
  		addPacketOpcode(SM_STATUPDATE_HP.class, Version.Chiness ? -1 : 0x12, idSet);
- 		addPacketOpcode(SM_STATUPDATE_EXP.class, Version.Chiness ? -1 : 0x19, idSet);
- 		addPacketOpcode(SM_STATUPDATE_DP.class, Version.Chiness ? -1 : 0x17, idSet);
- 		addPacketOpcode(SM_STATS_INFO.class, Version.Chiness ? 0x29 : 0x13, idSet);
- 		addPacketOpcode(SM_SKILL_LIST.class, Version.Chiness ? 0x1D : 0x2F, idSet);
- 		addPacketOpcode(SM_RESTORE_CHARACTER.class, Version.Chiness ? 0xC1 : 0xCB, idSet);
  		addPacketOpcode(SM_RECONNECT_KEY.class, Version.Chiness ? 0x0D : 0xFF, idSet);
- 		addPacketOpcode(SM_QUIT_RESPONSE.class, Version.Chiness ? 0x59 : 0x63, idSet);
- 		addPacketOpcode(SM_QUESTION_WINDOW.class, Version.Chiness ? -1 : 0x37, idSet);
- 		addPacketOpcode(SM_PONG.class, Version.Chiness ? 0x7C : 0x8C, idSet);
- 		addPacketOpcode(SM_PLAYER_STATE.class, Version.Chiness ? 0x33 : 0x45, idSet);
  		addPacketOpcode(SM_PLAYER_SEARCH.class, Version.Chiness ? -1 : 0xD3, idSet);
- 		addPacketOpcode(SM_PLAYER_INFO.class, Version.Chiness ? 0xFE : 0x06, idSet);
- 		addPacketOpcode(SM_NPC_INFO.class, Version.Chiness ? 0xFF : 0x09, idSet);
- 		addPacketOpcode(SM_NICKNAME_CHECK_RESPONSE.class, Version.Chiness ? 0xDF : 0xE9, idSet);
- 		addPacketOpcode(SM_MOVE.class, Version.Chiness ? 0x4F : 0x39, idSet);
- 		addPacketOpcode(SM_MESSAGE.class, Version.Chiness ? 0x31 : 0x1B, idSet);
- 		addPacketOpcode(SM_MAY_LOGIN_INTO_GAME.class, Version.Chiness ? 0x7F : 0x89, idSet);
- 		addPacketOpcode(SM_MACRO_LIST.class, Version.Chiness ? 0xD5 : 0xE7, idSet);
- 		addPacketOpcode(SM_L2AUTH_LOGIN_CHECK.class, Version.Chiness ? 0xB5 : 0xC7, idSet);
- 		addPacketOpcode(SM_KEY.class, Version.Chiness ? 0x3F : 0x49, idSet);
  		addPacketOpcode(SM_INVENTORY_INFO.class, Version.Chiness ? 0x2B : 0x1D, idSet);
- 		addPacketOpcode(SM_GAME_TIME.class, Version.Chiness ? 0x15 : 0x27, idSet);
  		addPacketOpcode(SM_FRIEND_UPDATE.class, Version.Chiness ? -1 : 0xEE, idSet);
- 		addPacketOpcode(SM_FRIEND_RESPONSE.class, Version.Chiness ? -1 : 0xDC, idSet);
- 		addPacketOpcode(SM_FRIEND_NOTIFY.class, Version.Chiness ? -1 : 0xE1, idSet);
- 		addPacketOpcode(SM_FRIEND_LIST.class,Version.Chiness ? 0x72 : 0x82, idSet);
- 		addPacketOpcode(SM_ENTER_WORLD_CHECK.class, Version.Chiness ? 0xF4 : 0x04, idSet);
- 		addPacketOpcode(SM_EMOTION.class, Version.Chiness ? 0x14 : 0x24, idSet);
  		addPacketOpcode(SM_DELETE.class, Version.Chiness ? 0xFB : 0x0D, idSet);
- 		addPacketOpcode(SM_DELETE_CHARACTER.class, Version.Chiness ? 0xC0 : 0xC8, idSet);
- 		addPacketOpcode(SM_CREATE_CHARACTER.class, Version.Chiness ? 0xBF : 0xC9, idSet);
- 		addPacketOpcode(SM_CHARACTER_LIST.class, Version.Chiness ? 0xBE : 0xC6, idSet);
- 		addPacketOpcode(SM_BLOCK_RESPONSE.class, Version.Chiness ? -1 : 0xDF ,idSet);
- 		addPacketOpcode(SM_BLOCK_LIST.class, Version.Chiness ? 0xD6 : 0xDE, idSet);
  		//addPacketOpcode(SM_TIME_CHECK.class, Version.Chiness ? 0x1E : 0x26, idSet);
  		//addPacketOpcode(SM_VIRTUAL_AUTH.class, Version.Chiness ? 0xD4 : 0xE4, idSet);
  		//addPacketOpcode(SM_WAITING_LIST.class, Version.Chiness ? -1 : 0x18, idSet);
  	}
  
  	static int getOpcode(Class<? extends AionServerPacket> packetClass)
--- 60,109 ----
  		addPacketOpcode(SM_UNK5E.class, Version.Chiness ? 0x5e : -1, idSet);
  		addPacketOpcode(SM_UNK32.class, Version.Chiness ? 0x32 : -1, idSet);
  		addPacketOpcode(SM_UNK17.class, Version.Chiness ? 0x17 : -1, idSet);
+ 		addPacketOpcode(SM_UNK0C.class, Version.Chiness ? 0x0C : 0x48, idSet);
  		addPacketOpcode(SM_UNK0A.class, Version.Chiness ? 0x0A : -1, idSet);
+ 		addPacketOpcode(SM_VERSION_CHECK.class, Version.Chiness ? 0xF6 : 0xF9, idSet);
+ 		addPacketOpcode(SM_SYSTEM_MESSAGE.class, Version.Chiness ? 0x2A : 0x30, idSet);
  		addPacketOpcode(SM_STATUPDATE_MP.class, Version.Chiness ? -1 : 0x14, idSet);
  		addPacketOpcode(SM_STATUPDATE_HP.class, Version.Chiness ? -1 : 0x12, idSet);
+ 		addPacketOpcode(SM_STATUPDATE_EXP.class, Version.Chiness ? -1 : 0x23, idSet); // 1.5.x unknown
+ 		addPacketOpcode(SM_STATUPDATE_DP.class, Version.Chiness ? -1 : 0x21, idSet); // 0x17
+ 		addPacketOpcode(SM_STATS_INFO.class, Version.Chiness ? 0x29 : 0xF8, idSet);
+ 		addPacketOpcode(SM_SKILL_LIST.class, Version.Chiness ? 0x1D : 0x45, idSet); // 0x45
+ 		addPacketOpcode(SM_RESTORE_CHARACTER.class, Version.Chiness ? 0xC1 : 0xE2, idSet);
  		addPacketOpcode(SM_RECONNECT_KEY.class, Version.Chiness ? 0x0D : 0xFF, idSet);
+ 		addPacketOpcode(SM_QUIT_RESPONSE.class, Version.Chiness ? 0x59 : 0x5B, idSet); // 63
+ 		addPacketOpcode(SM_QUESTION_WINDOW.class, Version.Chiness ? -1 : 0x3C, idSet);
+ 		addPacketOpcode(SM_PONG.class, Version.Chiness ? 0x7C : 0xA7, idSet);
+ 		addPacketOpcode(SM_PLAYER_STATE.class, Version.Chiness ? 0x33 : 0x3D, idSet);
  		addPacketOpcode(SM_PLAYER_SEARCH.class, Version.Chiness ? -1 : 0xD3, idSet);
+ 		addPacketOpcode(SM_PLAYER_INFO.class, Version.Chiness ? 0xFE : 0x19, idSet);
+ 		addPacketOpcode(SM_NPC_INFO.class, Version.Chiness ? 0xFF : 0x27, idSet);
+ 		addPacketOpcode(SM_NICKNAME_CHECK_RESPONSE.class, Version.Chiness ? 0xDF : 0xE0, idSet);
+ 		addPacketOpcode(SM_MOVE.class, Version.Chiness ? 0x4F : 0x4E, idSet);
+ 		addPacketOpcode(SM_MESSAGE.class, Version.Chiness ? 0x31 : 0x31, idSet);
+ 		addPacketOpcode(SM_MAY_LOGIN_INTO_GAME.class, Version.Chiness ? 0x7F : 0x80, idSet);
+ 		addPacketOpcode(SM_MACRO_LIST.class, Version.Chiness ? 0xD5 : 0xDE, idSet);
+ 		addPacketOpcode(SM_L2AUTH_LOGIN_CHECK.class, Version.Chiness ? 0xB5 : 0xBE, idSet);
+ 		addPacketOpcode(SM_KEY.class, Version.Chiness ? 0x3F : 0x41, idSet);
  		addPacketOpcode(SM_INVENTORY_INFO.class, Version.Chiness ? 0x2B : 0x1D, idSet);
+ 		addPacketOpcode(SM_GAME_TIME.class, Version.Chiness ? 0x15 : 0x1F, idSet);
  		addPacketOpcode(SM_FRIEND_UPDATE.class, Version.Chiness ? -1 : 0xEE, idSet);
+ 		addPacketOpcode(SM_FRIEND_RESPONSE.class, Version.Chiness ? -1 : 0xD7, idSet);
+ 		addPacketOpcode(SM_FRIEND_NOTIFY.class, Version.Chiness ? -1 : 0xD8, idSet);
+ 		addPacketOpcode(SM_FRIEND_LIST.class,Version.Chiness ? 0x72 : 0x7D, idSet);
+ 		addPacketOpcode(SM_ENTER_WORLD_CHECK.class, Version.Chiness ? 0xF4 : 0x24, idSet);
+ 		addPacketOpcode(SM_EMOTION.class, Version.Chiness ? 0x14 : 0x1C, idSet); // 25 1.5.x unknown
  		addPacketOpcode(SM_DELETE.class, Version.Chiness ? 0xFB : 0x0D, idSet);
+ 		addPacketOpcode(SM_DELETE_CHARACTER.class, Version.Chiness ? 0xC0 : 0xE3, idSet);
+ 		addPacketOpcode(SM_CREATE_CHARACTER.class, Version.Chiness ? 0xBF : 0xC0, idSet);
+ 		addPacketOpcode(SM_CHARACTER_LIST.class, Version.Chiness ? 0xBE : 0xC1, idSet);
+ 		addPacketOpcode(SM_BLOCK_RESPONSE.class, Version.Chiness ? -1 : 0xD6 ,idSet);
+ 		addPacketOpcode(SM_BLOCK_LIST.class, Version.Chiness ? 0xD6 : 0xD9, idSet);
  		//addPacketOpcode(SM_TIME_CHECK.class, Version.Chiness ? 0x1E : 0x26, idSet);
  		//addPacketOpcode(SM_VIRTUAL_AUTH.class, Version.Chiness ? 0xD4 : 0xE4, idSet);
  		//addPacketOpcode(SM_WAITING_LIST.class, Version.Chiness ? -1 : 0x18, idSet);
+ 		addPacketOpcode(SM_ATTACK.class, Version.Chiness ? -1 : 0xFC, idSet);		
  	}
  
  	static int getOpcode(Class<? extends AionServerPacket> packetClass)
